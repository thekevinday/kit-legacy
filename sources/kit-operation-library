#!/bin/bash
# the library operation installs a library file.
# while installing, it handles stripping, settings permissions, and even symbolic linkage for shared libraries.
#
# arguments:
#   type:
#   - the type of the library to install, can be: static, dynamic, or binutils
#     - binutils: the non-standard dynamic library that is common amongst a handfull of the older GNU projects.
#     - dynamic: standard shared library, produces 3 files, for eample: libexample.so, libexample.so.1, libexample.so.1.0.0.
#     - static: standard static library, ends in .a, for example: libexample.a.
#     - module: a dynamic library whose naming system is commonly used for dynamic loaded modules, for example: example.so.
#   name:
#   - the name of the library, without extensions, such as 'libexample' (as opposed to 'libexample.so' or 'libexample.a').
#   - this is the name the library is installed as.
#   destination:
#   - this is the destination path.
#   - this must be a directory and not a file.
#   source:
#   - this is either the source directory or source file.
#   - if it is a directory, then the file name is derived from the name argument above.
#

kit_operation_library_unset() {
  unset kit_operation_library
}

kit_operation_library() {
  local type=
  local name=
  local destination=
  local source=
  local library_source=
  local library_medium=

  # operation controls
  local parent=$parent-$self
  local self=operation

  kit_operation_message

  type=$(echo object $line | fss_extended_read -c 0 -s 0)
  name=$(echo object $line | fss_extended_read -c 0 -s 1)
  destination=$(echo object $line | fss_extended_read -c 0 -s 2)
  source=$(echo object $line | fss_extended_read -c 0 -s 3)

  if [[ $type != "static" && $type != "dynamic" && $type != "module" && $type != "binutils" ]] ; then
    kit_operation_error "Invalid type, must be one of: static, dynamic, module, or binutils"
  fi

  if [[ $(kit_core_is_empty $name) == "" ]] ; then
    kit_operation_error "Missing library name"
  fi

  if [[ $(kit_core_is_empty $destination) == "" ]] ; then
    kit_operation_error "Missing destination path"
  fi

  if [[ $(kit_core_is_empty $source) == "" ]] ; then
    kit_operation_error "Missing source path"
  fi

  destination=$(echo $destination | sed -e 's|/*$|/|' -e 's|/*$|/|')
  source=$(echo $source | sed -e 's|/*$|/|' -e 's|/*$|/|')

  if [[ ! -d $destination ]] ; then
    kit_operation_error "Destination path '$c_notice$destination$c_error' is not a valid directory"
  fi

  if [[ ! -d $source ]] ; then
    kit_operation_error "Source path '$c_notice$source$c_error' is not a valid directory"
  fi

  if [[ $type == "static" ]] ; then
    library_source="${name}.a"
  elif [[ $type == "dynamic" ]] ; then
    library_source=$(find $source -maxdepth 1 -name "${name}.so*" -type f | line)

    if [[ $(kit_core_is_empty $library_source) == "" ]] ; then
      kit_operation_error "Failed to find the library '$c_notice$source${name}.so$c_error'"
    fi

    library_medium=$(echo $library_source | grep -s -o "${name}\.so\.[^.]*")
    library_source=$(echo $library_source | grep -s -o "${name}\.so\..*$")
  elif [[ $type == "module" ]] ; then
    library_source="${name}.so"

    if [[ ! -f $source$library_source ]] ; then
      kit_operation_error "Failed to find the library '$c_notice$source$library_source$c_error'"
    fi
  elif [[ $type == "binutils" ]] ; then
    library_source=$(find $source -maxdepth 1 -name "${name}-${package_version}.so" -type f | line)

    if [[ $(kit_core_is_empty $library_source) == "" ]] ; then
      kit_operation_error "Failed to find the library '$c_notice$source${name}-${package_version}.so$c_error'"
    fi

    library_source="${name}-${package_version}.so"
  fi

  kit_operation_strip_apply library "$source$library_source"
  kit_operation_attribute_apply file "$source$library_source"
  kit_operation_group_apply "$source$library_source"
  kit_operation_mode_apply file "$source$library_source"
  #kit_operation_access_apply file "$source$library_source"

  kit_message_shell "cp --backup=simple --suffix=~ -a $source$library_source $installation_base$destination"
  cp --backup=simple --suffix=~ -a $source$library_source $installation_base$destination

  if [[ $? -ne 0 ]] ; then
    kit_operation_error "Failed to copy the library '$c_notice$source$library_source$c_error' to '$c_notice$installation_base$destination$c_error'"
  fi

  if [[ -f $installation_base$destination${library_source}~ ]] ; then
    kit_message_shell "rm -f $installation_base$destination${library_source}~"
    rm -f $installation_base$destination${library_source}~
  fi

  if [[ $type == "dynamic" ]] ; then
    kit_message_shell "ln -sf $library_source $installation_base$destination${library_medium}"
    ln -sf $library_source $installation_base$destination${library_medium}

    if [[ $? -ne 0 ]] ; then
      kit_operation_error "Failed to create a symbolic link of '$c_notice$library_medium$c_error' to '$c_notice$library_source$c_error' at the path '$c_notice$installation_base$destination$c_error'"
    fi

    kit_message_shell "ln -sf $library_medium $installation_base$destination${name}.so"
    ln -sf $library_medium $installation_base$destination${name}.so

    if [[ $? -ne 0 ]] ; then
      kit_operation_error "Failed to create a symbolic link of '$c_notice${name}.so$c_error' to '$c_notice$library_medium$c_error' at the path '$c_notice$installation_base$destination$c_error'"
    fi
  elif [[ $type == "binutils" ]] ; then
    kit_message_shell "ln -sf $library_source $installation_base$destination${name}.so"
    ln -sf $library_source $installation_base$destination${name}.so

    if [[ $? -ne 0 ]] ; then
      kit_operation_error "Failed to create a symbolic link of '$c_notice${name}.so$c_error' to '$c_notice$library_source$c_error' at the path '$c_notice$installation_base$destination$c_error'"
    fi
  fi
}
