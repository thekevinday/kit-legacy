#!/bin/bash

kit_package_unset() {
  unset kit_package_read
  unset kit_package_read_path
  unset kit_package_error
  unset kit_package_repository_load_rules
  unset kit_package_repository_load_premade
  unset kit_package_repository_load_source
  unset kit_package_repository_load_binary
  unset kit_package_repository_load_data
  unset kit_package_version_check
  unset kit_package_version_save
  unset kit_package
  unset kit_package_individual
}

kit_package_read() {
  kit_fss_read $package_path$package_file "$1" "$2" "$3" "$4" "$5"
}

kit_package_read_path() {
  kit_fss_read_path $package_path$package_file "$1" "$2" "$3" "$4" "$5"
}

kit_package_error() {
  kit_message_error "While processing the package '$c_notice$package$c_error', '$c_notice$package_what$c_error', '$c_notice$package_huh$c_error', '$c_notice$package_oh$c_error', '$c_notice$package_type$c_error' for the '$c_notice$distribution $distribution_version $distribution_flavor$c_error' distribution."

  if [[ $(standard_is_empty $*) != "" ]] ; then
    kit_message_error "$*"
  fi

  if [[ $self == "package" ]] ; then
    cleanup_before_exit
    exit -2
  fi
}

kit_package_repository_load_rules() {
  local path=$package_path_url$package_repository$package_path_rules
  local operation=$1
  local previous_path=$PWD

  if [[ ! -d "$system_cache_path$path" ]] ; then
    # note: this is also the "load" operation, which only does something when $system_cache_path$path does not exist.
    kit_message_shell "git clone $remote_depth -q -n -o $rule_branch $package_url$path $system_cache_path$path"
    git clone -q -n -o $rule_branch $package_url$path $system_cache_path$path

    if [[ $? -ne 0 || ! -d $system_cache_path$path ]] ; then
      kit_package_error "Failed to clone '$c_notice$package_url$path$c_error' with branch of '$c_notice$rule_branch$c_error' to '$c_notice$system_cache_path$path$c_error'"
    fi

    kit_message_shell "cd $system_cache_path$path"
    cd $system_cache_path$path

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to change to the directory '$c_notice$system_cache_path$path$c_error'"
    fi

    kit_message_shell "git checkout"
    git checkout

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to checkout rules repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
    fi

    if [[ $rule_revision != "HEAD" ]] ; then
      kit_message_shell "git reset --hard --quiet $rule_revision"
      git reset --hard --quiet $rule_revision

      if [[ $? -ne 0 ]] ; then
        kit_package_error "Failed to reset rules repository at '$c_notice$system_cache_path$path$c_error' to '$c_notice$rule_revision$c_error' for package '$c_notice$package$c_error'"
      fi
    fi
  elif [[ $operation == "update" ]] ; then
    kit_message_shell "cd $system_cache_path$path"
    cd $system_cache_path$path

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to change to the directory '$c_notice$system_cache_path$path$c_error'"
    fi

    kit_message_shell "git fetch --quiet"
    git fetch --quiet

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to fetch rules repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
    fi

    kit_message_shell "git pull --quiet --progress"
    git pull --quiet --progress

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to update rules repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
    fi
  elif [[ $operation == "reset" ]] ; then
    kit_message_shell "cd $system_cache_path$path"
    cd $system_cache_path$path

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to change to the directory '$c_notice$system_cache_path$path$c_error'"
    fi

    if [[ $rule_revision == "HEAD" ]] ; then
      kit_message_shell "git reset --hard --quiet"
      git reset --hard --quiet

      if [[ $? -ne 0 ]] ; then
        kit_package_error "Failed to reset rules repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
      fi
    else
      kit_message_shell "git reset --hard --quiet $rule_revision"
      git reset --hard --quiet $rule_revision

      if [[ $? -ne 0 ]] ; then
        kit_package_error "Failed to reset rules repository at '$c_notice$system_cache_path$path$c_error' to '$c_notice$rule_revision$c_error' for package '$c_notice$package$c_error'"
      fi
    fi
  fi

  if [[ $operation == "update" ]] ; then
    kit_message_highlight "The '${c_notice}rules$c_highlight' repository for the package '${c_notice}$package$c_highlight' has been updated."
  elif [[ $operation == "reset" ]] ; then
    kit_message_highlight "The '${c_notice}rules$c_highlight' repository for the package '${c_notice}$package$c_highlight' has been reset."
  fi

  kit_message_shell "cd $previous_path"
  cd $previous_path
}

kit_package_repository_load_premade() {
  local path=$package_path_url$package_repository$package_path_premade
  local operation=$1
  local previous_path=$PWD

  # note: whether or not premade files exist is determined by the rules in question, therefore this can only update and reset rules if the directories already exist
  if [[ ! -d $system_cache_path$path ]] ; then
    return
  elif [[ $operation == "update" ]] ; then
    kit_message_shell "cd $system_cache_path$path"
    cd $system_cache_path$path

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to change to the directory '$c_notice$system_cache_path$path$c_error'"
    fi

    kit_message_shell "git fetch --quiet"
    git fetch --quiet

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to fetch premade repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
    fi

    kit_message_shell "git pull --quiet --progress"
    git pull --quiet --progress

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to update premade repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
    fi
  elif [[ $operation == "reset" ]] ; then
    kit_message_shell "cd $system_cache_path$path"
    cd $system_cache_path$path

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to change to the directory '$c_notice$system_cache_path$path$c_error'"
    fi

    if [[ $premade_revision == "HEAD" ]] ; then
      kit_message_shell "git reset --hard --quiet"
      git reset --hard --quiet

      if [[ $? -ne 0 ]] ; then
        kit_package_error "Failed to reset premade repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
      fi
    else
      kit_message_shell "git reset --hard --quiet $premade_revision"
      git reset --hard --quiet $premade_revision

      if [[ $? -ne 0 ]] ; then
        kit_package_error "Failed to reset premade repository at '$c_notice$system_cache_path$path$c_error' to '$c_notice$premade_revision$c_error' for package '$c_notice$package$c_error'"
      fi
    fi
  fi

  if [[ $operation == "update" ]] ; then
    kit_message_highlight "The '${c_notice}premade$c_highlight' repository for the package '${c_notice}$package$c_highlight' has been updated."
  elif [[ $operation == "reset" ]] ; then
    kit_message_highlight "The '${c_notice}premade$c_highlight' repository for the package '${c_notice}$package$c_highlight' has been reset."
  fi

  kit_message_shell "cd $previous_path"
  cd $previous_path

  if [[ $? -ne 0 ]] ; then
    kit_package_error "Failed to change to the directory '$c_notice$previous_path$c_error'"
  fi
}

kit_package_repository_load_source() {
  local path=$package_path_url$package_repository$package_major_minor_path$package_path_source
  local operation=$1
  local previous_path=$PWD

  if [[ ! -d $system_cache_path$path ]] ; then
    # note: this is also the "load" operation, which only does something when $system_cache_path$path does not exist.
    kit_message_shell "git clone $remote_depth -q -n -o $source_branch $package_url$path $system_cache_path$path"
    git clone -q -n -o $source_branch $package_url$path $system_cache_path$path

    if [[ $? -ne 0 || ! -d $system_cache_path$path ]] ; then
      kit_package_error "Failed to clone '$c_notice$package_url$path$c_error' with branch of '$c_notice$source_branch$c_error' to '$c_notice$system_cache_path$path$c_error'"
    fi

    kit_message_shell "cd $system_cache_path$path"
    cd $system_cache_path$path

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to change to the directory '$c_notice$system_cache_path$path$c_error'"
    fi

    kit_message_shell "git checkout"
    git checkout

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to checkout source repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
    fi

    if [[ $source_revision != "HEAD" ]] ; then
      kit_message_shell "git reset --hard --quiet $source_revision"
      git reset --hard --quiet $source_revision

      if [[ $? -ne 0 ]] ; then
        kit_package_error "Failed to reset source repository at '$c_notice$system_cache_path$path$c_error' to '$c_notice$source_revision$c_error' for package '$c_notice$package$c_error'"
      fi
    fi
  elif [[ $operation == "update" ]] ; then
    kit_message_shell "cd $system_cache_path$path"
    cd $system_cache_path$path

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to change to the directory '$c_notice$system_cache_path$path$c_error'"
    fi

    kit_message_shell "git fetch --quiet"
    git fetch --quiet

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to fetch source repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
    fi

    kit_message_shell "git pull --quiet --progress"
    git pull --quiet --progress

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to update source repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
    fi
  elif [[ $operation == "reset" ]] ; then
    kit_message_shell "cd $system_cache_path$path"
    cd $system_cache_path$path

    if [[ $? -ne 0 ]] ; then
      kit_package_error "Failed to change to the directory '$c_notice$system_cache_path$path$c_error'"
    fi

    if [[ $source_revision == "HEAD" ]] ; then
      kit_message_shell "git reset --hard --quiet"
      git reset --hard --quiet

      if [[ $? -ne 0 ]] ; then
        kit_package_error "Failed to reset sources repository at '$c_notice$system_cache_path$path$c_error' for package '$c_notice$package$c_error'"
      fi
    else
      kit_message_shell "git reset --hard --quiet $source_revision"
      git reset --hard --quiet $source_revision

      if [[ $? -ne 0 ]] ; then
        kit_package_error "Failed to reset sources repository at '$c_notice$system_cache_path$path$c_error' to '$c_notice$source_revision$c_error' for package '$c_notice$package$c_error'"
      fi
    fi
  fi

  if [[ $operation == "update" ]] ; then
    kit_message_highlight "The '${c_notice}source$c_highlight' repository for the package '${c_notice}$package$c_highlight' has been updated."
  elif [[ $operation == "reset" ]] ; then
    kit_message_highlight "The '${c_notice}source$c_highlight' repository for the package '${c_notice}$package$c_highlight' has been reset."
  fi

  kit_message_shell "cd $previous_path"
  cd $previous_path

  if [[ $? -ne 0 ]] ; then
    kit_package_error "Failed to change to the directory '$c_notice$previous_path$c_error'"
  fi
}

kit_package_repository_load_binary() {
  local path=$package_path_url$package_repository$package_major_minor_path$package_path_binary

  # TODO
}

kit_package_repository_load_data() {
  local path=$package_path_url$package_repository$package_path_data

  # TODO
}

kit_package_version_check() {
  local path=$system_versions_path
  local file=${package}.version
  local version_string=
  local version_raw=
  local version_major=
  local version_minor=
  local version_micro=
  local version_what=
  local version_huh=
  local c=0
  local t=
  local c2=
  local t2=
  local w=
  local h=

  version_difference=new

  if [[ ! -f $path$file ]] ; then
    return
  fi

  t=$(fss_basic_list_read -n version -t $path$file)

  if [[ $(kit_fss_has_error) != "" ]] ; then
    kit_package_error "Failed to read '${c_notice}version${c_error}' data from '$c_notice$path$file$c_error'"
  fi

  while [[ $c -lt $t ]] ; do
    kit_fss_read "$path$file" version_string version string $c
    kit_fss_read "$path$file" version_raw version raw $c
    kit_fss_read "$path$file" version_major version major $c
    kit_fss_read "$path$file" version_minor version minor $c
    kit_fss_read "$path$file" version_micro version micro $c

    t2=$(fss_basic_list_read -n "${version_string}-$version_raw" -t $path$file)

    if [[ $(kit_fss_has_error) != "" ]] ; then
      kit_package_error "Failed to read '${c_notice}${version_string}-$version_raw${c_error}' data from '$c_notice$path$file$c_error'"
    fi

    if [[ $t2 -gt 0 ]] ; then
      let c2=0
      t2=$(fss_basic_list_read -n ${version_string}-$version_raw $path$file | fss_extended_read -t)

      if [[ $(kit_fss_has_error) != "" ]] ; then
        kit_package_error "Failed to read '${c_notice}${version_string}-$version_raw${c_error}' data from '$c_notice$path$file$c_error'"
      fi

      while [[ $c2 -lt $t2 ]] ; do
        w=$(fss_basic_list_read -n ${version_string}-$version_raw $path$file | fss_extended_read -c $c2 -o)

        if [[ $(kit_fss_has_error) != "" ]] ; then
          kit_package_error "Failed to read '${c_notice}${version_string}-$version_raw${c_error}' data from '$c_notice$path$file$c_error'"
        fi

        h=$(fss_basic_list_read -n ${version_string}-$version_raw $path$file | fss_extended_read -c $c2 -s 0)

        if [[ $(kit_fss_has_error) != "" ]] ; then
          kit_package_error "Failed to read '${c_notice}${version_string}-$version_raw${c_error}' data from '$c_notice$path$file$c_error'"
        fi

        if [[ $package_what == $w && $package_huh == $h ]] ; then
          if [[ $version_major -lt $about_version_major ]] ; then
            version_difference="newer"
            return;
          elif [[ $version_major -eq $about_version_major ]] ; then
            if [[ $version_minor == "x" || $about_version_minor == "x" ]] ; then
              version_difference="x"
              return
            elif [[ $(standard_is_empty $version_minor) != "" ]] ; then
              if [[ $(standard_is_empty $about_version_minor) != "" ]] ; then
                version_difference="same"
                return
              fi

              version_difference="unknown"
              return
            else
              if [[ $(standard_is_empty $version_minor) != "" ]] ; then
                if [[ $version_micro == "x" || $about_version_micro == "x" ]] ; then
                  version_difference="x"
                  return
                elif [[ $(standard_is_empty $about_version_micro) != "" ]] ; then
                  version_difference="same"
                  return
                fi

                version_difference="unknown"
                return
              elif [[ $version_micro -lt $about_version_micro ]] ; then
                version_difference="newer"
                return;
              elif [[ $version_micro -eq $about_version_micro ]] ; then
                version_difference="same"
                return;
              else
                version_difference="older"
                return;
              fi
            fi
          else
            version="older"
            return;
          fi
        fi
      done
    fi

    let c++
  done
}

kit_package_version_save() {

  # control variables
  local list_name=${package_version}-$package_version_raw

  # converted version information variables
  local safe_version_string=$(fss_extended_write -s -p "$package_version")
  local safe_version_raw=$(fss_extended_write -s -p "$package_version_raw")
  local safe_version_major=$(fss_extended_write -s -p "$about_version_major")
  local safe_version_minor=$(fss_extended_write -s -p "$about_version_minor")
  local safe_version_micro=$(fss_extended_write -s -p "$about_version_micro")
  local safe_version_name=$(fss_basic_list_write -s -o "$list_name")
  local safe_version_what=$(fss_extended_write -s -o "$package_what")
  local safe_version_huh=$(fss_extended_write -s -p "$package_huh")
  local safe_version_oh=$(fss_extended_write -s -p "$package_oh")


  # TODO: add support for multiple version files and objects

  # create new version information
  echo -e "# fss-0002\n" > $system_versions_path${package}.version

  echo >> $system_versions_path${package}.version
  echo "$(fss_basic_list_write -s -o version)" >> $system_versions_path${package}.version
  echo "  $(fss_extended_write -s -o string)$safe_version_string" >> $system_versions_path${package}.version
  echo "  $(fss_extended_write -s -o raw)$safe_version_raw" >> $system_versions_path${package}.version
  echo "  $(fss_extended_write -s -o major)$safe_version_major" >> $system_versions_path${package}.version
  echo "  $(fss_extended_write -s -o minor)$safe_version_minor" >> $system_versions_path${package}.version
  echo "  $(fss_extended_write -s -o micro)$safe_version_micro" >> $system_versions_path${package}.version
  echo >> $system_versions_path${package}.version

  echo >> $system_versions_path${package}.version
  echo "$safe_version_name" >> $system_versions_path${package}.version
  echo "  $safe_version_what$safe_version_huh$safe_version_oh" >> $system_versions_path${package}.version
  echo >> $system_versions_path${package}.version
}

kit_package_individual() {

  # package variables
  local package_what=$1
  local package_huh=$2
  local package_oh=$3
  local package_version_raw=

  # control variables
  local version_difference=
  local previous_path=$PWD
  local parent=package

  # other variables
  local skip=


  # TODO: add support for other operations, such as uninstall
  # load all appropriate repositories
  if [[ $kit_operation == "install" || ( $kit_operation == "alter" && $action != "force" ) ]] ; then
    kit_package_version_check

    # TODO: also keep in mind that some of the options here might require comparing the git revisions to see if the packages are actually the same (this is expensive)
    if [[ $kit_operation == "install" ]] ; then
      if [[ $version_difference != "new" ]] ; then
        kit_message_warning "Skipping '${c_notice}$package_what$c_error' '${c_notice}$package_huh$c_error' '${c_notice}$package_oh$c_error' of package '${c_notice}$package$c_error' because the package is already installed, try the alter operation instead."
        skip="yes"
      fi
    elif [[ $kit_operation == "alter" ]] ; then
      if [[ $action == "upgrade" ]] ; then
        if [[ $version_difference != "newer" && $version_difference != "x" ]] ; then
          kit_message_warning "Skipping '${c_notice}$package_what$c_error' '${c_notice}$package_huh$c_error' '${c_notice}$package_oh$c_error' of package '${c_notice}$package$c_error' because the package is already installed, try the alter operation instead."
          skip="yes"
        fi
      elif [[ $action == "downgrade" ]] ; then
        if [[ $version_difference != "older" && $version_difference != "x" ]] ; then
          kit_message_warning "Skipping '${c_notice}$package_what$c_error' '${c_notice}$package_huh$c_error' '${c_notice}$package_oh$c_error' of package '${c_notice}$package$c_error' because the package is already installed, try the alter operation instead."
          skip="yes"
        fi
      fi
    fi
  fi

  if [[ $skip == "yes" ]] ; then
    # TODO: do any cleanup operations here
    return
  fi

  kit_package_repository_load_rules

  if [[ $package_type == "source" ]] ; then
    kit_package_repository_load_source
    kit_package_repository_load_premade

    # TODO: at this point, if version_difference=="x" on an alter command attempt a git revision version test

    # TODO: now begin processing the rules
    kit_message_shell "cd $system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_source"
    cd $system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_source

    if [[ $source_revision == "HEAD" ]] ; then
      package_version_raw=$(git log -1 --format="%h")
    else
      package_version_raw=$source_revision
    fi
  elif [[ $package_type == "binary" ]] ; then
    kit_package_repository_load_binary
    kit_package_repository_load_data

    # TODO: at this point, if version_difference=="x" on an alter command attempt a git revision version test

    # TODO: now begin processing the rules
    kit_message_shell "cd $system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_binary"
    cd $system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_binary

    if [[ $binary_revision == "HEAD" ]] ; then
      package_version_raw=$(git log -1 --format="%h")
    else
      package_version_raw=$binary_revision
    fi
  fi

  # process the rules for a given package
  kit_rule "$package" "$package_what" "$package_huh" "$package_oh" "$package_type" "$package_url" "$package_path_url$package_repository" "$package_path_rules" "$package_path_premade"

  kit_message_highlight "'$c_notice$package_what$c_highlight', '$c_notice$package_huh$c_highlight', '$c_notice$package_oh$c_highlight' of the package '$c_notice$package$c_highlight' has been processed"

  kit_message_shell "cd $previous_path"
  cd $previous_path


  # save version information after install
  if [[ $kit_operation == "install" || $kit_operation == "alter" ]] ; then
    kit_package_version_save
  #elif [[ $kit_operation == "uninstall" ]] ; then
    # TODO: remove the appropriate "who" (that is, package_what, package_huh, and package_oh) and if there are no who's left, then remove the version file entirely
  fi


  # do cleanup
  if [[ $do_cleanup == "y" ]] ; then
    if [[ $package_type == "source" ]] ; then
      if [[ -d "$system_cache_path$package_path_url$package_repository$package_path_premade" ]] ; then
        rm -Rf "$system_cache_path$package_path_url$package_repository$package_path_premade"
      fi

      if [[ -d "$system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_source" ]] ; then
        rm -Rf "$system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_source"
        rmdir --ignore-fail-on-non-empty "$system_cache_path$package_path_url$package_repository$package_major_minor_path"
      fi
    fi

    if [[ -d "$system_cache_path$package_path_url$package_repository" ]] ; then
      rmdir --ignore-fail-on-non-empty "$system_cache_path$package_path_url$package_repository"
    fi

    if [[ -d "$system_cache_path$package_path_url" ]] ; then
      rmdir --ignore-fail-on-non-empty "$system_cache_path$package_path_url"
    fi
  fi
}

kit_package() {

  # package variables
  local package=$1
  local package_path=$2
  local package_file=$3
  local package_type=$targets_type
  local package_what=$targets_what
  local package_huh=$targets_huh
  local package_oh=$targets_oh
  local package_settings_name="package-$package"
  local package_path_url=package/
  local package_path_rules=rules/
  local package_path_source=source/
  local package_path_premade=premade/
  local package_path_binary=binary/
  local package_path_data=data/
  local package_url=
  local package_repository=
  local package_major_minor_path=
  local package_version=
  local package_version_raw=
  local package_version_file=${package}.version

  # package properties
  local about_name=
  local about_description=
  local about_version_major=
  local about_version_minor=
  local about_version_micro=
  local about_categories=
  local about_flags=

  local rule_branch=
  local rule_revision=
  local source_branch=
  local source_revision=
  local binary_branch=
  local binary_revision=
  local data_branch=
  local data_revision=
  local premade_branch=
  local premade_revision=

  # control variables
  local self=package
  local source=

  local logs_file=$package.log
  local resume_file=$kit_operation-$package.resume

  # other variables
  local w=
  local h=
  local o=
  local c=
  local t=
  local p1=
  local p2=
  local p3=
  local processed=


  kit_log_section
  kit_log_message message "obtaining and reading data for the package '$package'"


  if [[ ! -f $package_path$package_file ]] ; then
    kit_package_error "Failed to find the file '${c_notice}$package_path$package_file$c_error'"
  fi

  # ensure that the package resume file exists
  if [[ ! -f $resume_path$resume_file || $resume_execution != "yes" ]] ; then
    echo -e "# fss-0001\n" > $resume_path$resume_file
  fi


  # about:
  kit_package_read about_name about name 0
  kit_package_read about_description about description 0
  kit_package_read about_version_major about version 0 0
  kit_package_read about_version_minor about version 0 1
  kit_package_read about_version_micro about version 0 2
  kit_package_read about_categories about categories 0
  kit_package_read about_flags about flags 0

  if [[ $about_version_major != "" ]] ; then
    if [[ $about_version_minor != "" ]] ; then
      if [[ $about_version_micro != "" ]] ; then
        package_version=${about_version_major}.${about_version_minor}.${about_version_micro}
        package_major_minor_path=${about_version_major}.${about_version_minor}/
      else
        package_version=${about_version_major}.${about_version_minor}
        package_major_minor_path=$package_version/
      fi
    else
      package_version=${about_version_major}
      package_major_minor_path=$package_version/
    fi
  fi


  # from:
  kit_package_read_path package_url from url 0
  kit_package_read_path package_repository from repository 0


  # revisions:
  kit_package_read rule_branch revisions rule 0 0
  kit_package_read rule_revision revisions rule 0 1
  kit_package_read source_branch revisions source 0 0
  kit_package_read source_revision revisions source 0 1
  kit_package_read binary_branch revisions binary 0 0
  kit_package_read binary_revision revisions binary 0 1
  kit_package_read data_branch revisions data 0 0
  kit_package_read data_revision revisions data 0 1
  kit_package_read premade_branch revisions premade 0 0
  kit_package_read premade_revision revisions premade 0 1

  # assign defaults repositories in the event data is missing
  if [[ $(standard_is_empty $rule_branch) == "" ]] ; then
    rule_branch=master
  fi

  if [[ $(standard_is_empty $rule_revision) == "" ]] ; then
    rule_revision=HEAD
  fi

  if [[ $(standard_is_empty $source_branch) == "" ]] ; then
    source_branch=master
  fi

  if [[ $(standard_is_empty $source_revision) == "" ]] ; then
    source_revision=HEAD
  fi

  if [[ $(standard_is_empty $binary_branch) == "" ]] ; then
    binary_branch=master
  fi

  if [[ $(standard_is_empty $binary_revision) == "" ]] ; then
    binary_revision=HEAD
  fi

  if [[ $(standard_is_empty $data_branch) == "" ]] ; then
    data_branch=master
  fi

  if [[ $(standard_is_empty $data_revision) == "" ]] ; then
    data_revision=HEAD
  fi

  if [[ $(standard_is_empty $premade_branch) == "" ]] ; then
    premade_branch=master
  fi

  if [[ $(standard_is_empty $premade_revision) == "" ]] ; then
    premade_revision=HEAD
  fi



  # $package_what:
  if [[ ! $(fss_basic_list_read -n $package_what -t $package_path$package_file) -ge 1 ]] ; then
    kit_package_error "The list '${c_notice}$package_what${c_error}' is not defined in file '${c_notice}$package_path$package_file${c_error}'"
  fi

  if [[ $(standard_is_empty $(fss_basic_list_read -n $package_what -c 0 $package_path$package_file)) == "" ]] ; then
    kit_package_error "The list '${c_notice}$package_what${c_error}' in file '${c_notice}$package_path$package_file${c_error}' is empty"
  fi

  if [[ $(standard_is_empty $package_huh) == "" ]] ; then
    package_huh=$(fss_basic_list_read -n $package_what -c 0 $package_path$package_file | fss_extended_read -o | sort | uniq)

    if [[ $(kit_fss_has_error) != "" ]] ; then
      kit_package_error "Failed to read '${c_notice}${version_string}-$version_raw${c_error}' data from '$c_notice$path$file$c_error'"
    fi
  fi

  if [[ $(standard_is_empty $package_oh) == "" ]] ; then
    package_oh="object "

    for h in $package_huh ; do
      package_oh="${package_oh}$(fss_basic_list_read -n $package_what -c 0 $package_path$package_file | fss_extended_read -n $h -c 0 -s 0) "
    done
  else
    o=

    for h in $package_huh ; do
      o="${o}$package_oh "
    done

    package_oh="object $o"
  fi


  # TODO: requirements: or dependencies:


  # perform update on individual packages if they have been downloaded already, otherwise skip them.
  if [[ $kit_operation == "update" || $kit_operation == "reset" ]] ; then
    kit_package_repository_load_rules "$kit_operation"

    if [[ $package_type == "source" ]] ; then
      kit_package_repository_load_source "$kit_operation"
      kit_package_repository_load_premade "$kit_operation"
    elif [[ $package_type == "binary" ]] ; then
      kit_package_repository_load_binary "$kit_operation"
      kit_package_repository_load_data "$kit_operation"
    fi

    # always remove resume file on proper exit
    if [[ -f $resume_path$resume_file ]] ; then
      rm -f $resume_path$resume_file
    fi

    return
  fi

  processed=

  # operate on individual package parts (what + huh + oh)
  for w in $package_what ; do
    let c=0
    p1=$(fss_extended_write -p -s "$w" | sed -e 's|[[:space:]]*$||')

    for h in $package_huh ; do
      o=$(echo "$package_oh" | fss_extended_read -c 0 -s $c)
      p2=$(fss_extended_write -p -s "$h" | sed -e 's|[[:space:]]*$||')
      p3=$(fss_extended_write -p -s "$o" | sed -e 's|[[:space:]]*$||')

      if [[ $(echo $processed | grep -s -i "\<$o\>") == "" ]] ; then
        if [[ ! -f "$resume_path$resume_file" || $(fss_basic_read -n processed $resume_path$resume_file | grep -s -o "^[[:space:]]*$p1[[:space:]]*$p2[[:space:]]*$p3[[:space:]]*$") == "" ]] ; then
          kit_package_individual $w $h $o
          echo "$(fss_extended_write -s processed)$p1 $p2 $p3" >> "$resume_path$resume_file"
          processed="${processed}$o "
        fi
      fi

      let c++
    done
  done


  # do cleanup

  # always remove resume file on proper exit
  if [[ -f $resume_path$resume_file ]] ; then
    rm -f $resume_path$resume_file
  fi

  if [[ $do_cleanup == "y" ]] ; then
    # TODO: implement locking so that files don't get deleted until there are no instances left
    if [[ -d $system_cache_path$package_path_url$package_repository$package_path_rules ]] ; then
      rm -Rf $system_cache_path$package_path_url$package_repository$package_path_rules
    fi

    if [[ $package_type == "source" ]] ; then
      if [[ -d $system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_source ]] ; then
        rm -Rf $system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_source
      fi

      if [[ -d $system_cache_path$package_path_url$package_repository$package_path_premade ]] ; then
        rm -Rf $system_cache_path$package_path_url$package_repository$package_path_premade
      fi
    elif [[ $package_type == "binary" ]] ; then
      if [[ -d $system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_binary ]] ; then
        rm -Rf $system_cache_path$package_path_url$package_repository$package_major_minor_path$package_path_binary
      fi

      # TODO: should data be stored under the directory $package_major_minor_path ?
      if [[ -d $system_cache_path$package_path_url$package_repository$package_path_data ]] ; then
        rm -Rf $system_cache_path$package_path_url$package_repository$package_path_data
      fi
    fi

    if [[ -d $system_cache_path$package_path_url$package_repository ]] ; then
      rmdir --ignore-fail-on-non-empty $system_cache_path$package_path_url$package_repository
    fi

    if [[ -d $system_cache_path$package_path_url ]] ; then
      rmdir --ignore-fail-on-non-empty $system_cache_path$package_path_url
    fi
  fi
}
