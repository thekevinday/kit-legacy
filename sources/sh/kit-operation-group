#!/bin/bash
# the group operation saves the group variable settings so that the group may be applied in subsequent file, directory, or library operations.
#
# arguments
#   type:
#     - this designates what category the permission belongs under.
#     - this is a reference to the list object name in the appropriate settings.permissions file either on the local system settings or in the distribution settings.
#   name:
#     - this is name used to represent the permission.
#     - this is a reference to the actual permissions in the appropriate settings.permissions file either on the local system settings or in the distribution settings.

kit_operation_group_unset() {
  unset kit_operation_group_apply
  unset kit_operation_group_resume
  unset kit_operation_group
  unset kit_operation_group_unset
}

kit_operation_group_apply() {
  local filepath=$1
  local recursive=$(echo "${@:2}" | grep -s -o "\<recursive\>")
  local dereference=$(echo "${@:2}" | grep -s -o "\<dereference\>")
  local permission=

  if [[ $permission_group_type == "none" ]] ; then
    return
  fi

  kit_permission_get "$permission_group_type" "$permission_group_name"

  if [[ $(kit_core_is_empty $permission) == "" ]] ; then
    return
  fi

  if [[ $(kit_core_is_empty $recursive) == "" ]] ; then
    kit_message_shell "chgrp $permission $filepath"
    chgrp $permission $filepath

    if [[ $? -ne 0 ]] ; then
      kit_operation_error "Failed to set group '$c_notice$permission$c_error' on the file '$c_notice$filepath$c_error'"
    fi
  else
    kit_message_shell "chgrp -R $permission $filepath"
    chgrp -R $permission $filepath

    if [[ $? -ne 0 ]] ; then
      kit_operation_error "Failed to set group '$c_notice$permission$c_error' on the files at '$c_notice$filepath$c_error'"
    fi
  fi
}

kit_operation_group_resume() {
  local name=
  local line=

  if [[ $(fss_basic_read -t -n permission_group_type $resume_path$resume_file) -gt 0 ]] ; then
    line=$(fss_basic_read -n permission_group_type -c 0 $resume_path$resume_file)

    if [[ $(kit_fss_has_error) != "" ]] ; then
      kit_operation_error "Error while processing the group data '${c_notice}permission_group_type$c_error' from the resume file '$c_notice$resume_path$resume_file$c_error', cannot resume"
    fi

    permission_group_type=$line
  fi

  if [[ $(fss_basic_read -t -n permission_group_name $resume_path$resume_file) -gt 0 ]] ; then
    line=$(fss_basic_read -n permission_group_name -c 0 $resume_path$resume_file)

    if [[ $(kit_fss_has_error) != "" ]] ; then
      kit_operation_error "Error while processing the group data '${c_notice}permission_group_name$c_error' from the resume file '$c_notice$resume_path$resume_file$c_error', cannot resume"
    fi

    permission_group_name=$line
  fi
}

kit_operation_group() {
  local type=
  local name=

  # operation controls
  local parent=$parent-$self
  local self=operation

  kit_operation_message

  type=$(echo object $line | fss_extended_read -c 0 -s 0)
  name=$(echo object $line | fss_extended_read -c 0 -s 1)


  if [[ $(kit_core_is_empty $type) == "" ]] ; then
    kit_operation_error "The '${c_notice}type$c_error' parameter for the '$c_notice$operation$c_error' operation is missing"
  fi

  if [[ $(kit_core_is_empty $name) == "" ]] ; then
    kit_operation_error "The '${c_notice}name$c_error' parameter for the '$c_notice$operation$c_error' operation is missing"
  fi

  permission_group_type=$type
  permission_group_name=$name
}
