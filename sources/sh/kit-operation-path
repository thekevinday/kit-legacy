#!/bin/bash
# the path operation is used to perform a directory change operation while processing a script.
# this is better than doing cd directly because if the script is every stopped and resumed later, this state will be reset.
# the path operation is always relative to the source or binary directory.
#
# arguments:
#   path (optional):
#   - when defined, this is the path to change to, previous path will be reset.
#
# if no arguments are specified, then the resume path is reset and directory is changed to the original source or binary directory.

kit_operation_path_unset() {
  unset kit_operation_path
  unset kit_operation_path_resume
  unset kit_operation_path_unset
}

kit_operation_path() {
  local part=
  local temporary=

  # operation controls
  local parent=$parent-$self
  local self=operation

  kit_operation_message

  part=$(echo object $line | fss_extended_read -c 0 -s 0)

  if [[ $(kit_fss_has_error) != "" ]] ; then
    kit_operation_error "Failed to process the '$c_notice$operation$c_error' operation data"
  fi

  if [[ $(kit_core_is_empty $part) == "" ]] ; then
    if [[ $(kit_core_is_empty $path_previous) == "" ]] ; then
      kit_operation_error "The original path is not properly defined, cannot reset path"
    fi

    kit_message_shell "cd $path_previous"
    cd $path_previous

    if [[ $? -ne 0 ]] ; then
      kit_operation_error "Failed to go to the path '$c_notice$path_previous$c_error', cannot reset path"
    fi

    sed -i -e '/^[[:space:]]*path_original\>[[:space:]]*/d' $resume_path$resume_file
    sed -i -e '/^[[:space:]]*path_current\>[[:space:]]*/d' $resume_path$resume_file

    path_current=$PWD
  else
    if [[ ! -d $part ]] ; then
      kit_operation_error "The path '$c_notice$part$c_error' is not a valid directory"
    fi

    kit_message_shell "cd $path_previous"
    cd "$path_previous"

    if [[ $? -ne 0 ]] ; then
      kit_operation_error "Failed to go to the path '$c_notice$path_previous$c_error', cannot reset path"
    fi

    sed -i -e '/^[[:space:]]*path_original\>[[:space:]]*/d' $resume_path$resume_file
    temporary=$(fss_extended_write -s -p "$path_previous")
    echo "$(fss_extended_write -s -o path_original)$temporary" >> $resume_path$resume_file

    kit_message_shell "cd $part"
    cd $part

    if [[ $? -ne 0 ]] ; then
      kit_operation_error "Failed to go to the path '$c_notice$part$c_error'"
    fi

    path_current=$PWD
    temporary=$(fss_extended_write -s -p "$path_current")

    sed -i -e '/^[[:space:]]*path_current\>[[:space:]]*/d' $resume_path$resume_file
    echo "$(fss_extended_write -s -o path_current)$temporary" >> $resume_path$resume_file
  fi
}

kit_operation_path_resume() {
  path_current=$path_previous

  if [[ $(fss_extended_read -n path_current -t $resume_path$resume_file) -gt 0 ]] ; then
    path_current=$(fss_extended_read -n path_current -c 0 -s 0 $resume_path$resume_file)

    if [[ $(kit_fss_has_error) != "" || ! -d $path_current ]] ; then
      kit_operation_error "The current path '$c_notice$path_current$c_error' as specified in the resume file '$c_notice$resume_path$resume_file$c_error' is not a valid directory, cannot resume"
    fi

    kit_message_shell "cd $path_current"
    cd $path_current

    if [[ $? -ne 0 ]] ; then
      kit_operation_error "Failed to go to the path '$c_notice$path_current$c_error', cannot resume"
    fi
  fi
}
