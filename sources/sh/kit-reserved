#!/bin/bash
# provides functions for reading and writing reserved variables.

kit_reserved_unset() {
  unset kit_reserved_is
  unset kit_reserved_get
  unset kit_reserved_set
  unset kit_reserved_register
  unset kit_reserved_unset
}

kit_reserved_is() {
  local name=$1

  echo -n $(echo "$reserved_variables" | grep -s -o "\<$name=[[:alpha:]]*\>" | sed -e "s|$name=||")
}

kit_reserved_set() {
  local name=$1
  local value=$2
  local position=

  position=$(kit_reserved_is $name)

  if [[ $(kit_core_is_empty $position) == "" ]] ; then
    return
  fi

  if [[ $position == "global" ]] ; then
    case $name in
      "system_settings_path") system_settings_path=$value;;
      "system_data_path") system_data_path=$value;;
      "system_cache_path") system_cache_path=$value;;
      "system_versions_path") system_versions_path=$value;;
      "system_settings_file") system_settings_file=$value;;
      "system_permissions_file") system_permissions_file=$value;;
      "system_environment_file") system_environment_file=$value;;
      "system_settings_name") system_settings_name=$value;;
      "installation_base") installation_base=$value;;
      "remote_url_web") remote_url_web=$value;;
      "remote_url_git") remote_url_git=$value;;
      "remote_branch") remote_branch=$value;;
      "remote_tag") remote_tag=$value;;
      "remote_depth") remote_depth=$value;;
      "distribution") distribution=$value;;
      "distribution_version") distribution_version=$value;;
      "distribution_flavor") distribution_flavor=$value;;
      "distribution_path") distribution_path=$value;;
      "distribution_base") distribution_base=$value;;
      "distribution_settings") distribution_settings=$value;;
      "distribution_environment") distribution_environment=$value;;
      "distribution_permissions") distribution_permissions=$value;;
      "targets") targets=$value;;
      "targets_path") targets_path=$value;;
      "targets_extension") targets_extension=$value;;
      "targets_type") targets_type=$value;;
      "targets_what") targets_what=$value;;
      "targets_huh") targets_huh=$value;;
      "targets_oh") targets_oh=$value;;
    esac

    kit_log_message save reserved "$name" "$value"
    return
  elif [[ $self == "global" ]] ; then
    return;
  fi

  if [[ $position == "package" && ( $self == "package" || $(echo "$parent" | grep -s -o '\<package\>') != "" ) ]] ; then
    case $name in
      "package") package=$value;;
      "package_type") package_type=$value;;
      "package_what") package_what=$value;;
      "package_huh") package_huh=$value;;
      "package_oh") package_oh=$value;;
      "package_settings_name") package_settings_name=$value;;
      "package_path_url") package_path_url=$value;;
      "package_path_rules") package_path_rules=$value;;
      "package_path_source") package_path_source=$value;;
      "package_path_premade") package_path_premade=$value;;
      "package_path_binary") package_path_binary=$value;;
      "package_path_data") package_path_data=$value;;
      "package_path_base") package_path_base=$value;;
      "package_url") package_url=$value;;
      "package_repository") package_repository=$value;;
      "package_major_minor_path") package_major_minor_path=$value;;
      "package_version") package_version=$value;;
      "package_version_raw") package_version_raw=$value;;
      "package_version_file") package_version_file=$value;;
      "about_name") about_name=$value;;
      "about_description") about_description=$value;;
      "about_version_major") about_version_major=$value;;
      "about_version_minor") about_version_minor=$value;;
      "about_version_micro") about_version_micro=$value;;
      "about_categories") about_categories=$value;;
      "about_flags") about_flags=$value;;
      "rule_branch") rule_branch=$value;;
      "rule_revision") rule_revision=$value;;
      "source_branch") source_branch=$value;;
      "source_revision") source_revision=$value;;
      "binary_branch") binary_branch=$value;;
      "binary_revision") binary_revision=$value;;
      "data_branch") data_branch=$value;;
      "data_revision") data_revision=$value;;
    esac

    kit_log_message save reserved "$name" "$value"
    return
  elif [[ $self == "package" ]] ; then
    return;
  fi

  # TODO: add support for procedure here

  if [[ $position == "rule" && ( $self == "rule" || $(echo "$parent" | grep -s -o '\<rule\>') != "" ) ]] ; then
    case $name in
      "rule_what") rule_what=$value;;
      "rule_huh") rule_huh=$value;;
      "rule_oh") rule_oh=$value;;
      "rule_type") rule_type=$value;;
      "about_from") about_from=$value;;
      "about_copyright") about_copyright=$value;;
      "about_flags") about_flags=$value;;
      "premade_path") premade_path=$value;;
      "if_condition") if_condition=$value;;
    esac

    kit_log_message save reserved "$name" "$value"
    return
  elif [[ $self == "rule" ]] ; then
    return;
  fi
}

kit_reserved_get() {
  local name=$1
  local position=
  local file=
  local list=

  reserved=
  position=$(kit_reserved_is $name)

  if [[ $(kit_core_is_empty $position) == "" ]] ; then
    return
  fi

  if [[ $position == "global" ]] ; then
    case $name in
      "system_settings_path") reserved=$system_settings_path;;
      "system_data_path") reserved=$system_data_path;;
      "system_cache_path") reserved=$system_cache_path;;
      "system_versions_path") reserved=$system_versions_path;;
      "system_settings_file") reserved=$system_settings_file;;
      "system_permissions_file") reserved=$system_permissions_file;;
      "system_environment_file") reserved=$system_environment_file;;
      "system_settings_name") reserved=$system_settings_name;;
      "installation_base") reserved=$installation_base;;
      "remote_url_web") reserved=$remote_url_web;;
      "remote_url_git") reserved=$remote_url_git;;
      "remote_branch") reserved=$remote_branch;;
      "remote_tag") reserved=$remote_tag;;
      "remote_depth") reserved=$remote_depth;;
      "distribution") reserved=$distribution;;
      "distribution_version") reserved=$distribution_version;;
      "distribution_flavor") reserved=$distribution_flavor;;
      "distribution_path") reserved=$distribution_path;;
      "distribution_base") reserved=$distribution_base;;
      "distribution_settings") reserved=$distribution_settings;;
      "distribution_environment") reserved=$distribution_environment;;
      "distribution_permissions") reserved=$distribution_permissions;;
      "targets") reserved=$targets;;
      "targets_path") reserved=$targets_path;;
      "targets_extension") reserved=$targets_extension;;
      "targets_type") reserved=$targets_type;;
      "targets_what") reserved=$targets_what;;
      "targets_huh") reserved=$targets_huh;;
      "targets_oh") reserved=$targets_oh;;
    esac

    kit_log_message load reserved "$name" "$reserved"
    return
  elif [[ $self == "global" ]] ; then
    return;
  fi

  if [[ $position == "package" && ( $self == "package" || $(echo "$parent" | grep -s -o '\<package\>') != "" ) ]] ; then
    case $name in
      "package") reserved=$package;;
      "package_path") reserved=$package_path;;
      "package_file") reserved=$package_file;;
      "package_type") reserved=$package_type;;
      "package_what") reserved=$package_what;;
      "package_huh") reserved=$package_huh;;
      "package_oh") reserved=$package_oh;;
      "package_settings_name") reserved=$package_settings_name;;
      "package_path_url") reserved=$package_path_url;;
      "package_path_rules") reserved=$package_path_rules;;
      "package_path_source") reserved=$package_path_source;;
      "package_path_premade") reserved=$package_path_premade;;
      "package_path_binary") reserved=$package_path_binary;;
      "package_path_data") reserved=$package_path_data;;
      "package_path_base") reserved=$package_path_base;;
      "package_url") reserved=$package_url;;
      "package_repository") reserved=$package_repository;;
      "package_major_minor_path") reserved=$package_major_minor_path;;
      "package_version") reserved=$package_version;;
      "package_version_raw") reserved=$package_version_raw;;
      "package_version_file") reserved=$package_version_file;;
      "about_name") reserved=$about_name;;
      "about_description") reserved=$about_description;;
      "about_version_major") reserved=$about_version_major;;
      "about_version_minor") reserved=$about_version_minor;;
      "about_version_micro") reserved=$about_version_micro;;
      "about_categories") reserved=$about_categories;;
      "about_flags") reserved=$about_flags;;
      "rule_branch") reserved=$rule_branch;;
      "rule_revision") reserved=$rule_revision;;
      "source_branch") reserved=$source_branch;;
      "source_revision") reserved=$source_revision;;
      "binary_branch") reserved=$binary_branch;;
      "binary_revision") reserved=$binary_revision;;
      "data_branch") reserved=$data_branch;;
      "data_revision") reserved=$data_revision;;
    esac

    kit_log_message load reserved "$name" "$reserved"
    return
  elif [[ $self == "package" ]] ; then
    return;
  fi

  # TODO: add support for procedure here

  if [[ $position == "rule" && ( $self == "rule" || $(echo "$parent" | grep -s -o '\<rule\>') != "" ) ]] ; then
    case $name in
      "rule_what") reserved=$rule_what;;
      "rule_huh") reserved=$rule_huh;;
      "rule_oh") reserved=$rule_oh;;
      "rule_type") reserved=$rule_type;;
      "about_from") reserved=$about_from;;
      "about_copyright") reserved=$about_copyright;;
      "about_flags") reserved=$about_flags;;
      "premade_path") reserved=$premade_path;;
      "if_condition") reserved=$if_condition;;
    esac

    kit_log_message load reserved "$name" "$reserved"
    return
  elif [[ $self == "rule" ]] ; then
    return;
  fi
}

kit_reserved_register() {
  local name=


  # register global reserved variables
  for name in system_settings_path system_data_path system_cache_path system_versions_path system_settings_file system_permissions_file system_environment_file system_settings_name installation_base ; do
    reserved_variables="${reserved_variables}$name=global "
  done

  for name in remote_url_web remote_url_git remote_branch remote_tag remote_depth ; do
    reserved_variables="${reserved_variables}$name=global "
  done

  for name in distribution distribution_version distribution_flavor distribution_path distribution_base distribution_settings_path distribution_settings_file distribution_environment_file distribution_permissions_file ; do
    reserved_variables="${reserved_variables}$name=global "
  done

  for name in targets targets_path targets_extension targets_type targets_what targets_huh targets_oh ; do
    reserved_variables="${reserved_variables}$name=global "
  done


  # register package reserved variables
  for name in package package_type package_what package_huh package_oh package_settings_name package_path_url package_path_rules package_path_source package_path_premade package_path_binary package_path_data package_path_base package_url package_repository package_major_minor_path package_version package_version_raw package_version_file ; do
    reserved_variables="${reserved_variables}$name=package "
  done

  for name in about_name about_description about_version_major about_version_minor about_version_micro about_categories about_flags ; do
    reserved_variables="${reserved_variables}$name=package "
  done

  for name in rule_branch rule_revision source_branch source_revision binary_branch binary_revision data_branch data_revision ; do
    reserved_variables="${reserved_variables}$name=package "
  done


  # register procedure reserved variables
  # TODO


  # register rule reserved variables
  for name in rule_what rule_huh rule_oh rule_type ; do
    reserved_variables="${reserved_variables}$name=rule "
  done

  for name in about_from about_copyright about_flags ; do
    reserved_variables="${reserved_variables}$name=rule "
  done

  for name in premade_path if_condition; do
    reserved_variables="${reserved_variables}$name=rule "
  done
}
